local kbot = { 
    Misc = {
        InfiniteJump = false,
        Noclip = false,
        NoJumpCD = false
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
--[Checker]------------------------------------------------------------------------------------------------------------------------------------------------------
if Mommy == true then error("Mommy Has Already Been Executed\n Please Unload To Execute It Again",0) return end
pcall(function() getgenv().Mommy  = true end)
--------------------------------------------------------------------------------------------------------------------------------------------------------
--[Loaded]------------------------------------------------------------------------------------------------------------------------------------------------------
if not game:IsLoaded() then game.Loaded:Wait() end
--------------------------------------------------------------------------------------------------------------------------------------------------------
--[Variables]------------------------------------------------------------------------------------------------------------------------------------------------------
local startTime = os.time()
--------------------------------------------------------------------------------------------------------------------------------------------------------
--[UI]------------------------------------------------------------------------------------------------------------------------------------------------------
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/dohmai/Mommy/main/Libraries/UI"))()
--[Window]------------------------------------------------------------------------------------------------------------------------------------------------------
local main = library:Load{Name = " Mommy", SizeX = 495, SizeY = 620, Theme = "Default", Extension = "json", Folder = "NiggaHood"}
--[Tabs]------------------------------------------------------------------------------------------------------------------------------------------------------
local C = main:Tab("Combat")
local T = main:Tab("Misc")
local V = main:Tab("Visuals")
local S = main:Tab("Settings")
--[Combat]------------------------------------------------------------------------------------------------------------------------------------------------------
local Tab1 = C:Section{Name = "Tab 1", Side = "Left"}

local piss = Tab1:Label("Universal")

local Tab2 = C:Section{Name = "Tab 2", Side = "Right"}
--[Visual]------------------------------------------------------------------------------------------------------------------------------------------------------

local Tab1 = V:Section{Name = "Tab 1", Side = "Left"}
local Tab2 = V:Section{Name = "Tab 2", Side = "Right"}
--[Misc]------------------------------------------------------------------------------------------------------------------------------------------------------
local Tab1 = T:Section{Name = "Players", Side = "Left"}

local playerlist = {}
for i,v in pairs(game.Players:GetPlayers())do
    if v ~= game.Players.LocalPlayer then
    table.insert(playerlist,v.Name)
    end
end

local drop = Tab1:Dropdown{
Content = {unpack(playerlist)},
Name = "Selection",
Scrollable = true, 
ScrollingMax = 5,
Flag = "Dropdown 1",
    Callback = function(a)
    value = a    
end}
    
drop:Refresh{unpack(playerlist)}

Tab1:Button{
Name = "Teleport",
    Callback  = function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[value].Character.HumanoidRootPart.CFrame
end}

game.Players.PlayerAdded:Connect(function(player)
    local name = player.Name
    table.insert(playerlist,name)
    drop:Refresh(playerlist)
end)

game.Players.PlayerRemoving:Connect(function(player)
    local name = player.Name
    for i,v in pairs(playerlist)do
    if v == name then  
    table.remove(playerlist,i)
    end
end
    drop:Refresh(playerlist)
end)

Tab1:Button{
Name = "View",
    Callback  = function(bool)
    workspace.Camera.CameraSubject = game:GetService("Players")[value].Character.Humanoid
end}

Tab1:Button{
Name = "Unview",
    Callback  = function(bool)
    workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
end}



local Tab2 = T:Section{Name = "Player", Side = "Right"}



Tab2:Toggle{Name = "Infinite Jump",
Flag = "Toggle 1",Callback  = function(bool)
    kbot.Misc.InfiniteJump = bool
        local Player = game:GetService("Players").LocalPlayer
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if kbot.Misc.InfiniteJump then
            Player.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
        end
    end)
end}

Tab2:Toggle{Name = "No Jump Cooldown",
Flag = "Toggle 1",Callback  = function(bool)
    kbot.Misc.NoJumpCD = bool 
    local a;
    a = hookfunction(wait, function(b) if b == 1.5 and kbot.Misc.NoJumpCD then return a() end return a(b) end)
end}


Tab2:Toggle{Name = "Noclip",
Flag = "Toggle 1",Callback  = function(bool)
    kbot.Misc.Noclip = bool
        game:GetService("RunService").Stepped:Connect(function()
            if kbot.Misc.Noclip then
                pcall(function()
                    for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                        if v.ClassName == "Part" or v.ClassName == "MeshPart" then
                        v.CanCollide = false
                    end
                end
            end)
        end
    end)   
end}



local speedy = Tab2:Toggle{Name = "Speed",
Flag = "Toggle 1",Callback  = function(bool)
    getgenv().CSpeed = bool 
    for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
            v:Destroy()
        end
    end
    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        repeat
            wait()
        until game.Players.LocalPlayer.Character
        char.ChildAdded:Connect(function(child)
            if child:IsA("Script") then 
                wait(0.1)
                if child:FindFirstChild("LocalScript") then
                    child.LocalScript:FireServer()
                end
            end
        end)
    end)
game:GetService("RunService").Heartbeat:Connect(
function()
        if getgenv().CSpeed == true then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame +
                game.Players.LocalPlayer.Character.Humanoid.MoveDirection * CSpeedValue
        end
    end)
end}

speedy:Keybind
{Blacklist = {Enum.UserInputType.MouseButton1}, Mode = "Toggle",
Flag = "Toggle 2 Keybind 1", Callback = function()

end}

speedy:Slider
{Name = "Slider", Text = "[value]/1000", Min = 0, Max = 1000, Float = 10,
Flag = "Slider 1", Callback = function(value)
    getgenv().CSpeedValue = value/500   
end}


local flyer = Tab2:Toggle{Name = "Fly",
Flag = "Toggle 1",Callback  = function(bool)
    getgenv().Flying = bool
local maxdistance = 100000000000000 --using math.huge makes this script wonky
local uiservice = game.UserInputService
local lplr = game.Players.LocalPlayer
local mouse = lplr:GetMouse()
local function GetVelocity(pos1,pos2,StudsPerSecond)
local distance = (pos2 - pos1)
local mag = distance.Magnitude
return (distance/mag)*StudsPerSecond
end
local function getkey(keycode)
local key = tostring(keycode):lower()
local findcode, a = key:find("keycode.")
return key:sub(a+1)
end
local function getkey(keycode)
local key = tostring(keycode):lower()
local findcode, a = key:find("keycode.")
return key:sub(a+1)
end
local keys = {}
game.RunService.Heartbeat:connect(function()
pcall(function()
local hrp = lplr.Character.Humanoid.RootPart
local frontoffset = CFrame.new() + Vector3.new(0,0,-maxdistance)
local backoffset = CFrame.new() + Vector3.new(0,0,maxdistance)
local leftoffset = CFrame.new() + Vector3.new(-maxdistance,0,0)
local rightoffset = CFrame.new() + Vector3.new(maxdistance,0,0)
local upoffset = CFrame.new() + Vector3.new(0,maxdistance,0)
local downoffset = CFrame.new() + Vector3.new(0,-maxdistance,0)
local velocity = Vector3.new()
    if Flying then
    if keys.w_active then
        velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*frontoffset).Position,FlySpeed)
    end
    if keys.s_active then
        velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*backoffset).Position,FlySpeed)
    end
    if keys.a_active then
        velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*leftoffset).Position,FlySpeed)
    end
    if keys.d_active then
        velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*rightoffset).Position,FlySpeed)
    end
    if keys.e_active then
        velocity = velocity + GetVelocity(hrp.Position,(CFrame.new(hrp.Position)*upoffset).Position,FlySpeed)
    end
    if keys.q_active then
        velocity = velocity + GetVelocity(hrp.Position,(CFrame.new(hrp.Position)*downoffset).Position,FlySpeed)
    end
    hrp.Velocity = velocity
     hrp.CFrame = CFrame.new(hrp.Position, (workspace.Camera.CFrame*(CFrame.new()+Vector3.new(0,0,-maxdistance))).Position)
    end
    if Flying and not keys.w_active and not keys.a_active and not keys.s_active and not keys.d_active and not keys.q_active and not keys.e_active then
        hrp.Anchored = true
    else
        hrp.Anchored = false
    end
end)
end)
uiservice.InputBegan:connect(function(key,processed)
if processed then return end
    if key.KeyCode == Enum.KeyCode.P and game.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
        Flying = not Flying
        if Flying then
            uiservice.MouseBehavior = Enum.MouseBehavior.LockCenter
            lplr.Character.Humanoid.CameraOffset = Vector3.new(2,0,0)
        else
            uiservice.MouseBehavior = Enum.MouseBehavior.Default
            lplr.Character.Humanoid.CameraOffset = Vector3.new(0,0,0)
        end
    end
    keys[getkey(key.KeyCode).."_active"] = true
end)
uiservice.InputEnded:connect(function(key)
    keys[getkey(key.KeyCode).."_active"] = false
end)
end}

flyer:Keybind
{Blacklist = {Enum.UserInputType.MouseButton1}, Mode = "Toggle",
Flag = "Toggle 2 Keybind 1", Callback = function()

end}

flyer:Slider
{Name = "Slider", Text = "[value]/1000", Min = 0, Max = 1000, Float = 10,
Flag = "Slider 1", Callback = function(value)
    getgenv().FlySpeed = value
end}
-- // ============================================================ // --
-- // =Theme====================================================== // -- // --
local Theme = S:Section{Name = "Theme", Side = "Left"}

local themepickers = {}

local themelist = Theme:Dropdown{
Name = "Selection", Default = library.currenttheme, Content = library:GetThemes(), Flag = "Theme Dropdown",
    Callback = function(option)
        if option then
            library:SetTheme(option)
            for option, picker in next, themepickers do
                picker:Set(library.theme[option])
        end
    end
end}

library:ConfigIgnore("Theme Dropdown")

local namebox = Theme:Box{
Name = "Custom Theme Name", Placeholder = "Custom Theme", Flag = "Custom Theme"
}

library:ConfigIgnore("Custom Theme")

Theme:Button{
Name = "Save Custom Theme",
    Callback = function()
        if library:SaveCustomTheme(library.flags["Custom Theme"]) then
            themelist:Refresh(library:GetThemes())
            themelist:Set(library.flags["Custom Theme"])
            namebox:Set("")
    end
end}
-- // ============================================================ // --
-- // =Custom Theme=============================================== // --
local CustomTheme = S:Section{Name = "Custom Theme", Side = "Right"}

themepickers["Accent"] = CustomTheme:ColorPicker{
Name = "Accent", Default = library.theme["Accent"], Flag = "Accent",
    Callback = function(color)
        library:ChangeThemeOption("Accent", color)
end}

library:ConfigIgnore("Accent")

themepickers["Window Background"] = CustomTheme:ColorPicker{
Name = "Window Background", Default = library.theme["Window Background"], Flag = "Window Background",
    Callback = function(color)
        library:ChangeThemeOption("Window Background", color)
end}

library:ConfigIgnore("Window Background")

themepickers["Window Border"] = CustomTheme:ColorPicker{
Name = "Window Border", Default = library.theme["Window Border"], Flag = "Window Border",
    Callback = function(color)
        library:ChangeThemeOption("Window Border", color)
end}

library:ConfigIgnore("Window Border")

themepickers["Tab Background"] = CustomTheme:ColorPicker{
Name = "Tab Background", Default = library.theme["Tab Background"], Flag = "Tab Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Background", color)
end}

library:ConfigIgnore("Tab Background")

themepickers["Tab Border"] = CustomTheme:ColorPicker{
Name = "Tab Border", Default = library.theme["Tab Border"], Flag = "Tab Border",
    Callback = function(color)
        library:ChangeThemeOption("Tab Border", color)
end}

library:ConfigIgnore("Tab Border")

themepickers["Tab Toggle Background"] = CustomTheme:ColorPicker{
Name = "Tab Toggle Background", Default = library.theme["Tab Toggle Background"], Flag = "Tab Toggle Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Toggle Background", color)
end}

library:ConfigIgnore("Tab Toggle Background")

themepickers["Section Background"] = CustomTheme:ColorPicker{
Name = "Section Background", Default = library.theme["Section Background"], Flag = "Section Background",
    Callback = function(color)
        library:ChangeThemeOption("Section Background", color)
end}

library:ConfigIgnore("Section Background")

themepickers["Section Border"] = CustomTheme:ColorPicker{
Name = "Section Border", Default = library.theme["Section Border"], Flag = "Section Border",
    Callback = function(color)
        library:ChangeThemeOption("Section Border", color)
end}

library:ConfigIgnore("Section Border")

themepickers["Text"] = CustomTheme:ColorPicker{
Name = "Text", Default = library.theme["Text"], Flag = "Text",
    Callback = function(color)
        library:ChangeThemeOption("Text", color)
end}

library:ConfigIgnore("Text")

themepickers["Disabled Text"] = CustomTheme:ColorPicker{
Name = "Disabled Text", Default = library.theme["Disabled Text"], Flag = "Disabled Text",
    Callback = function(color)
        library:ChangeThemeOption("Disabled Text", color)
end}

library:ConfigIgnore("Disabled Text")

themepickers["Object Background"] = CustomTheme:ColorPicker{
Name = "Object Background", Default = library.theme["Object Background"], Flag = "Object Background",
    Callback = function(color)
        library:ChangeThemeOption("Object Background", color)
end}

library:ConfigIgnore("Object Background")

themepickers["Object Border"] = CustomTheme:ColorPicker{
Name = "Object Border", Default = library.theme["Object Border"], Flag = "Object Border",
    Callback = function(color)
        library:ChangeThemeOption("Object Border", color)
end}

library:ConfigIgnore("Object Border")

themepickers["Dropdown Option Background"] = CustomTheme:ColorPicker{
Name = "Dropdown Option Background", Default = library.theme["Dropdown Option Background"], Flag = "Dropdown Option Background",
    Callback = function(color)
        library:ChangeThemeOption("Dropdown Option Background", color)
end}

library:ConfigIgnore("Dropdown Option Background")
-- // ============================================================ // --
-- // =Config===================================================== // --
local Config = S:Section{Name = "Config", Side = "Left"}

local configlist = Config:Dropdown{
Name = "Selection", Content = library:GetConfigs(), Flag = "Config Dropdown"}

library:ConfigIgnore("Config Dropdown")

local loadconfig = Config:Button{
Name = "Load Config",
    Callback = function()
        library:LoadConfig(library.flags["Config Dropdown"])
end}

local delconfig = Config:Button{
Name = "Delete Config",
    Callback = function()
        library:DeleteConfig(library.flags["Config Dropdown"]) configlist:Refresh(library:GetConfigs())
end}


local configbox = Config:Box{
Name = "Config Name", Placeholder = "Config Name", Flag = "Config Name"
}

library:ConfigIgnore("Config Name")

local save = Config:Button{
Name = "Save Config",
    Callback = function()
        library:SaveConfig(library.flags["Config Dropdown"] or library.flags["Config Name"]) configlist:Refresh(library:GetConfigs())
end}

local Main = S:Section{Name = "Main", Side = "Left"}

Main:Keybind{
Name = "Show/Hide UI", Flag = "UI Toggle", Default = Enum.KeyCode.Z,
Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
        library:Close() end
end}

Main:Button{
Name = "Copy Discord",
    Callback  = function()
    setclipboard("https://discord.com/invite/XWQ8U8Qr5B")
end}

Main:Button{
Name = "Join Discord",
    Callback  = function()
syn.request(
   {
       Url = "http://127.0.0.1:6463/rpc?v=1",
       Method = "POST",
       Headers = {
           ["Content-Type"] = "application/json",
           ["origin"] = "https://discord.com",
       },
       Body = game:GetService("HttpService"):JSONEncode(
           {
               ["args"] = {
                   ["code"] = "XWQ8U8Qr5B",
               },
               ["cmd"] = "INVITE_BROWSER",
               ["nonce"] = "."
           })
   })
end}

Main:Button{
Name = "Rejoin Server",
    Callback  = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
end}

Main:Button{
Name = "Rejoin Game",
    Callback  = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId)
end}

Main:Button{
Name = "Unload",
    Callback  = function()
        library:Unload() getgenv().Mommy  = false
end}
-- // ============================================================ // --
-- // =Credits==================================================== // --
local Credits = S:Section{Name = "Credits", Side = "Right"}

Credits:Label("Myself - Everything")
Credits:Label("Myself - My Buddy")
Credits:Label("Myself - Emotional Support")
-- // ============================================================ // --
-- // =Information================================================ // --
local Information = S:Section{Name = "Information", Side = "Right"}

Information:Label("Game - Da Hood")
local Uptime = Information:Label("Timer - 00:00:00")
-- // ============================================================ // --
while task.wait(1) do
Uptime:Set ("Timer - "..os.date("!%X", os.time() - startTime))
end

